{"version":3,"sources":["Board.js","Algorithms/Backtracking.js","Algorithms/Solver.js","SudokuBrain.js","App.js","serviceWorker.js","index.js"],"names":["Square","props","value","val","disabled","active","type","maxLength","onChange","e","keycode","target","charCodeAt","update","Number","className","class","Board","rows","items","i","j","displayClass","isActive","default","solving","solvedBoard","numbers","push","key","toString","this","makeBoard","React","Component","Backtracking","speed","positionsToChange","row","column","board","position","length","x","y","newVal","setBoard","boardIsValid","sleep","setSolved","ms","Promise","resolve","setTimeout","entries","Array","fill","number","region","xStart","yStart","Math","floor","xPos","yPos","defaultBoards","SudokuController","copyBoard","newBoard","slice","updateBoard","state","stopping","setState","SolvedBoard","currentBoard","solve","boardID","beforeSolve","solveSpeed","unsolve","changeBoard","Boards","clear","solved","onClick","id","App","SudokuBrain","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.32d15731.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Board.css\";\r\n\r\nclass Board extends React.Component {\r\n  // Returns a grid of Squares based on the 2D array props.numbers of the Board.\r\n  makeBoard() {\r\n    let rows = [];\r\n    let items = [];\r\n    for (let i = 0; i < 9; i++) {\r\n      for (let j = 0; j < 9; j++) {\r\n        let displayClass = \"square\";\r\n        let isActive = this.props.default[i][j] === \"\" && !this.props.solving;\r\n        if (\r\n          this.props.solvedBoard &&\r\n          this.props.numbers[i][j] &&\r\n          this.props.numbers[i][j] !== this.props.solvedBoard[i][j]\r\n        ) {\r\n          displayClass += \" wrong\";\r\n        }\r\n        // isActive = this.props.default[i][j] === \"\" && !this.props.solving;\r\n        items.push(\r\n          <Square\r\n            key={j}\r\n            update={val => {\r\n              this.props.update(i, j, val);\r\n            }}\r\n            class={displayClass}\r\n            active={isActive}\r\n            val={this.props.numbers[i][j].toString()}></Square>\r\n        );\r\n      }\r\n      rows.push(\r\n        <div className=\"row\" key={i}>\r\n          {items}\r\n        </div>\r\n      );\r\n      items = [];\r\n    }\r\n    return <div className=\"Board\">{rows}</div>;\r\n  }\r\n\r\n  render() {\r\n    return this.makeBoard();\r\n  }\r\n}\r\n\r\n// A square has 2 properties:\r\n//    props.active determines whether the square can be modified\r\n//    props.val determines the value for the square to display\r\nfunction Square(props) {\r\n  // Restricts input to numbers 1-9 and updates state of Board if input is valid\r\n  function handleInput(e) {\r\n    var keycode = e.target.value.charCodeAt(0);\r\n    if (keycode < 49 || keycode > 57) {\r\n      e.target.value = \"\";\r\n    } else {\r\n      props.update(Number(e.target.value));\r\n    }\r\n  }\r\n  return (\r\n    <input\r\n      value={props.val}\r\n      disabled={!props.active}\r\n      type=\"text\"\r\n      maxLength=\"1\"\r\n      onChange={handleInput}\r\n      className={\r\n        props.active ? props.class + \" active\" : props.class + \" inactive\"\r\n      }></input>\r\n  );\r\n}\r\n\r\nexport default Board;\r\n","import Solver from \"./Solver\";\r\n\r\nclass Backtracking extends Solver {\r\n  async solve(speed) {\r\n    let positionsToChange = [];\r\n    for (let row = 0; row < 9; row++) {\r\n      for (let column = 0; column < 9; column++) {\r\n        if (this.board[row][column] === \"\") {\r\n          positionsToChange.push([row, column]);\r\n        }\r\n      }\r\n    }\r\n    let position = 0;\r\n    while (position < positionsToChange.length && position >= 0) {\r\n      let x = positionsToChange[position][0];\r\n      let y = positionsToChange[position][1];\r\n      let newVal = this.board[x][y] === \"\" ? 1 : this.board[x][y] + 1;\r\n      if (newVal === 10) {\r\n        position--;\r\n        if (!this.setBoard(x, y, \"\")) return;\r\n        continue;\r\n      } else {\r\n        if (!this.setBoard(x, y, newVal)) return;\r\n        if (this.boardIsValid()) {\r\n          position++;\r\n        }\r\n      }\r\n      if (speed > 0) {\r\n        await this.sleep(speed);\r\n      }\r\n    }\r\n    // await this.sleep(5);\r\n    // this.solveToggle();\r\n    this.setSolved();\r\n  }\r\n}\r\n\r\nexport default Backtracking;\r\n","class Solver {\r\n  constructor(board, setBoard, setSolved) {\r\n    this.board = board;\r\n    this.setBoard = setBoard;\r\n    this.setSolved = setSolved;\r\n  }\r\n\r\n  sleep = ms => {\r\n    return new Promise(resolve => setTimeout(resolve, ms));\r\n  };\r\n\r\n  boardIsValid = () => {\r\n    // Check rows\r\n    for (let row = 0; row < 9; row++) {\r\n      let entries = new Array(9).fill(false);\r\n      for (let column = 0; column < 9; column++) {\r\n        if (this.board[row][column] !== \"\") {\r\n          let number = this.board[row][column] - 1;\r\n          if (entries[number]) {\r\n            return false;\r\n          } else {\r\n            entries[number] = true;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    // Check columns\r\n    for (let column = 0; column < 9; column++) {\r\n      let entries = new Array(9).fill(false);\r\n      for (let row = 0; row < 9; row++) {\r\n        if (this.board[row][column] !== \"\") {\r\n          let number = this.board[row][column] - 1;\r\n          if (entries[number]) {\r\n            return false;\r\n          } else {\r\n            entries[number] = true;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    // Check Regions\r\n    for (let region = 0; region < 9; region++) {\r\n      let xStart = (region % 3) * 3;\r\n      let yStart = Math.floor(region / 3) * 3;\r\n      let entries = new Array(9).fill(false);\r\n      // console.log(xStart, yStart);\r\n\r\n      for (let i = 0; i < 9; i++) {\r\n        let xPos = xStart + (i % 3);\r\n        let yPos = yStart + Math.floor(i / 3);\r\n        // console.log(xPos, yPos);\r\n\r\n        if (this.board[xPos][yPos] !== \"\") {\r\n          let number = this.board[xPos][yPos] - 1;\r\n          if (entries[number]) {\r\n            return false;\r\n          } else {\r\n            entries[number] = true;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return true;\r\n  };\r\n}\r\n\r\nexport default Solver;\r\n","import React from \"react\";\r\nimport Board from \"./Board\";\r\nimport Backtracking from \"./Algorithms/Backtracking\";\r\n\r\nconst defaultBoards = [\r\n  [\r\n    [\"\", \"\", \"\", \"\", \"\", 6, 4, 8, 1],\r\n    [8, \"\", 5, \"\", 9, 4, 2, \"\", \"\"],\r\n    [1, \"\", 4, 7, \"\", 2, \"\", \"\", \"\"],\r\n    [\"\", \"\", 6, \"\", \"\", \"\", 3, 1, 4],\r\n    [5, \"\", 3, \"\", 1, 8, \"\", \"\", 6],\r\n    [\"\", 9, 1, \"\", 4, 3, \"\", \"\", \"\"],\r\n    [\"\", \"\", \"\", 4, \"\", \"\", \"\", 6, \"\"],\r\n    [6, \"\", 9, \"\", 3, 1, 7, \"\", 2],\r\n    [\"\", 1, \"\", \"\", \"\", \"\", \"\", 5, \"\"]\r\n  ],\r\n  [\r\n    [5, 4, 3, \"\", \"\", \"\", \"\", \"\", \"\"],\r\n    [\"\", \"\", \"\", \"\", \"\", \"\", 7, \"\", 9],\r\n    [8, \"\", \"\", \"\", \"\", 2, 5, \"\", \"\"],\r\n    [\"\", \"\", 9, 2, \"\", \"\", \"\", 5, \"\"],\r\n    [6, 5, 4, \"\", \"\", \"\", \"\", \"\", \"\"],\r\n    [\"\", \"\", \"\", 7, 6, \"\", \"\", \"\", \"\"],\r\n    [\"\", \"\", \"\", 9, \"\", 3, \"\", \"\", \"\"],\r\n    [\"\", \"\", \"\", \"\", \"\", \"\", 1, 3, \"\"],\r\n    [2, \"\", 6, \"\", \"\", 4, \"\", 7, \"\"]\r\n  ],\r\n  [\r\n    [\"\", \"\", 6, \"\", \"\", 4, \"\", \"\", \"\"],\r\n    [3, \"\", \"\", 1, \"\", \"\", 8, \"\", \"\"],\r\n    [1, \"\", \"\", \"\", \"\", \"\", 6, \"\", \"\"],\r\n    [\"\", \"\", 7, \"\", 8, \"\", \"\", \"\", 3],\r\n    [\"\", \"\", 1, \"\", 5, \"\", \"\", \"\", 9],\r\n    [\"\", 8, \"\", 7, \"\", \"\", \"\", \"\", \"\"],\r\n    [\"\", 7, \"\", \"\", \"\", 9, \"\", 4, \"\"],\r\n    [\"\", \"\", \"\", \"\", \"\", 3, \"\", 9, \"\"],\r\n    [4, \"\", \"\", \"\", 1, \"\", \"\", \"\", \"\"]\r\n  ]\r\n];\r\n\r\nclass SudokuController extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    //initialises the current board to be a copy of the default board\r\n    this.state = {\r\n      solveSpeed: 50,\r\n      solving: false,\r\n      stopping: false,\r\n      solved: false,\r\n      Boards: [\r\n        this.copyBoard(defaultBoards[0]),\r\n        this.copyBoard(defaultBoards[1]),\r\n        this.copyBoard(defaultBoards[2])\r\n      ],\r\n      SolvedBoard: null,\r\n      boardID: 0,\r\n      currentBoard: this.copyBoard(defaultBoards[0]),\r\n      beforeSolve: null\r\n    };\r\n  }\r\n\r\n  // makes a deep copy of a board\r\n  copyBoard = board => {\r\n    var newBoard = [];\r\n    for (let i = 0; i < board.length; i++) {\r\n      newBoard.push(board[i].slice());\r\n    }\r\n    return newBoard;\r\n  };\r\n\r\n  updateBoard = (x, y, val) => {\r\n    if (this.state.stopping) {\r\n      this.setState({ stopping: false, solving: false });\r\n      return false;\r\n    }\r\n    if (this.state.SolvedBoard) {\r\n      this.setState({ SolvedBoard: null });\r\n    }\r\n    let newBoard = this.state.currentBoard;\r\n    newBoard[x][y] = val;\r\n    this.setState({ currentBoard: newBoard });\r\n    return true;\r\n  };\r\n\r\n  setSolved = () => {\r\n    this.setState({ SolvedBoard: this.state.currentBoard });\r\n  };\r\n\r\n  solve = () => {\r\n    this.setState(\r\n      {\r\n        currentBoard: this.copyBoard(defaultBoards[this.state.boardID]),\r\n        stopping: false,\r\n        solving: true,\r\n        beforeSolve: this.copyBoard(this.state.currentBoard)\r\n      },\r\n      () => {\r\n        let solver = new Backtracking(\r\n          this.state.currentBoard,\r\n          this.updateBoard,\r\n          this.setSolved\r\n        );\r\n        solver.solve(this.state.solveSpeed);\r\n      }\r\n    );\r\n  };\r\n\r\n  unsolve = () => {\r\n    this.setState({\r\n      stopping: this.state.SolvedBoard ? false : true,\r\n      solving: false,\r\n      currentBoard: this.copyBoard(this.state.beforeSolve)\r\n    });\r\n  };\r\n\r\n  changeBoard = board => {\r\n    if (this.state.boardID !== board) {\r\n      this.setState({ SolvedBoard: null });\r\n      switch (this.state.boardID) {\r\n        case 0:\r\n          this.setState({\r\n            Boards: [\r\n              this.copyBoard(this.state.currentBoard),\r\n              this.state.Boards[1],\r\n              this.state.Boards[2]\r\n            ]\r\n          });\r\n          break;\r\n        case 1:\r\n          this.setState({\r\n            Boards: [\r\n              this.state.Boards[0],\r\n              this.copyBoard(this.state.currentBoard),\r\n              this.state.Boards[2]\r\n            ]\r\n          });\r\n          break;\r\n        case 2:\r\n          this.setState({\r\n            Boards: [\r\n              this.state.Boards[0],\r\n              this.state.Boards[1],\r\n              this.copyBoard(this.state.currentBoard)\r\n            ]\r\n          });\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n      this.setState({\r\n        currentBoard: this.copyBoard(this.state.Boards[board]),\r\n        boardID: board,\r\n        solving: false\r\n      });\r\n    }\r\n  };\r\n\r\n  clear = () => {\r\n    this.setState({\r\n      stopping: this.state.solving,\r\n      solving: false,\r\n      currentBoard: this.copyBoard(defaultBoards[this.state.boardID])\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"Sudoku\">\r\n        <Board\r\n          solving={this.state.solving}\r\n          solvedBoard={this.state.SolvedBoard}\r\n          update={this.updateBoard}\r\n          numbers={this.state.currentBoard}\r\n          default={defaultBoards[this.state.boardID]}></Board>\r\n        <div className=\"Buttons\">\r\n          <div className=\"difficulty\">\r\n            <h1>Board Select</h1>\r\n            <button\r\n              className={this.state.boardID === 0 ? \"selected\" : \"\"}\r\n              disabled={this.state.solving || this.state.boardID === 0}\r\n              onClick={() => this.changeBoard(0)}>\r\n              Easy\r\n            </button>\r\n            <button\r\n              className={this.state.boardID === 1 ? \"selected\" : \"\"}\r\n              disabled={this.state.solving || this.state.boardID === 1}\r\n              onClick={() => this.changeBoard(1)}>\r\n              Medium\r\n            </button>\r\n            <button\r\n              className={this.state.boardID === 2 ? \"selected\" : \"\"}\r\n              disabled={this.state.solving || this.state.boardID === 2}\r\n              onClick={() => this.changeBoard(2)}>\r\n              Hard\r\n            </button>\r\n          </div>\r\n          <div className=\"Control\">\r\n            <h2>Solve speed</h2>\r\n            <select\r\n              id=\"speed\"\r\n              disabled={this.state.solving}\r\n              onChange={e => {\r\n                this.setState({ solveSpeed: Number(e.target.value) });\r\n              }}>\r\n              <option value=\"50\">Slow</option>\r\n              <option value=\"10\">Medium</option>\r\n              <option value=\"1\">Fast</option>\r\n              <option value=\"0\">Instant</option>\r\n            </select>\r\n            <button\r\n              id=\"solve\"\r\n              onClick={this.state.solving ? this.unsolve : this.solve}>\r\n              {this.state.solving ? \"Return To Board\" : \"Solve\"}\r\n            </button>\r\n            <button id=\"clear\" onClick={this.clear}>\r\n              Clear Board\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SudokuController;\r\n","import React from \"react\";\r\nimport SudokuBrain from \"./SudokuBrain\";\r\nimport \"./App.css\";\r\n\r\nclass App extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <SudokuBrain></SudokuBrain>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}